name: CI

on:
  workflow_call:
    inputs:
      registry:
        description: OCI registry for image publishing
        required: true
        type: string
      tag:
        description: OCI image tag to use for publishing
        required: true
        type: string
    secrets:
      mail_server:
        description: Server address for sending mail
        required: true
      mail_server_port:
        description: Server port for sending mail
        required: true
      mail_targets:
        description: Target addresses for sending mail
        required: true
      mail_username:
        description: Username on the mail server
        required: true
      mail_password:
        description: Password on the mail server
        required: true

jobs:
  image:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: angular
    permissions:
      contents: read
      packages: write
    steps:
      - name: Check out the repository
        id: checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332  # v4.1.7

      - name: Set up node
        id: setup-node
        uses: actions/setup-node@1e60f620b9541d16bece96c5465dc8ee9832be0b  # v4.0.3
        with:
          node-version: current
          cache: npm
          cache-dependency-path: angular/package-lock.json

      - name: Run clean install
        id: npm-ci
        run: npm ci

      - name: Run tests
        id: npm-test
        run: npm run test -- --browsers ChromeHeadless --no-watch --no-progress

      - name: Build the project
        id: npm-build
        run: npm run build -- --configuration production

      - name: Set up buildx plugin
        id: setup-buildx
        uses: docker/setup-buildx-action@988b5a0280414f521da01fcc63a27aeeb4b104db  # v3.6.1

      - name: Log into registry ${{ inputs.registry }} as ${{ github.actor }}
        id: docker-login
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567  # v3.3.0
        with:
          registry: ${{ inputs.registry }}
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Extract metadata
        id: docker-meta
        uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81  # v5.5.1
        with:
          images: ${{ inputs.registry }}/${{ github.repository }}
          tags: |
            type=raw,value=${{ inputs.tag }}

      - name: Build and push the image
        id: docker-build-push
        uses: docker/build-push-action@5cd11c3a4ced054e52742c5fd54dca954e0edd85  # v6.7.0
        with:
          context: .
          push: true
          tags: ${{ steps.docker-meta.outputs.tags }}
          labels: ${{ steps.docker-meta.outputs.labels }}

      - name: Retrieve the execution time
        id: exec-time
        if: always()
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "time=$(gh api /repos/${{ github.repository }}/actions/runs/${{ github.run_id }} \
            --jq '(.updated_at | fromdate) - (.created_at | fromdate)')" >> "$GITHUB_OUTPUT"

      - name: Send summary
        if: always()
        uses: dawidd6/action-send-mail@2cea9617b09d79a095af21254fbcb7ae95903dde  # v3.12.0
        with:
          server_address: ${{ secrets.mail_server }}
          server_port: ${{ secrets.mail_server_port }}
          username: ${{ secrets.mail_username }}
          password: ${{ secrets.mail_password }}
          subject: GitHub Actions Job Summary for ${{ github.repository }} (${{ job.status }})
          to: ${{ secrets.mail_targets }}
          from: GitHub Actions (on behalf of ${{ github.actor }})
          body: |-
            Job status: ${{ job.status }}.
            Workflow took approximately ${{ steps.exec-time.outputs.time }} seconds to execute.
            Summary:
            - Check out the repository: ${{ steps.checkout.outcome }}
            - Set up node: ${{ steps.setup-node.outcome }}
            - Run clean install: ${{ steps.npm-ci.outcome }}
            - Run tests: ${{ steps.npm-test.outcome }}
            - Build the project: ${{ steps.npm-build.outcome }}
            - Set up buildx plugin: ${{ steps.setup-buildx.outcome }}
            - Log into ${{ inputs.registry }} as ${{ github.actor }}: ${{ steps.docker-login.outcome }}
            - Extract metadata: ${{ steps.docker-meta.outcome }}
            - Build and push the image: ${{ steps.docker-build-push.outcome }}
            - Retrieve the execution time: ${{ steps.exec-time.outcome }}
            - Send summary via email: one can only hope
